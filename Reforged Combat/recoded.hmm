Code "Combo Table Fixes" by "datsquishyfello"
//
	#include "Reflection" noemit

    #lib "Sonic"
	#lib "Reflection"
	#lib "SonicParameters"
    #lib "Bitwise"
	#lib "BlackboardBattle"
    #lib "BlackboardStatus"

//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
	return;
	
	var pGameObject = Player.Status.GetLockOnTarget();

    if (pGameObject == null)
        return;
	
    bool isLockOnEnemy = GameObject.GetGOC(pGameObject, "GOCHealth") != null;
	
		if (isLockOnEnemy)
		{
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitExistTarget[0], SonicParameters.Action.AcceleCombo1);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitInAir[0], SonicParameters.Action.AerialAcceleCombo1);				
		}	
		else
		{
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitExistTarget[0], SonicParameters.Action.HomingAttack);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitInAir[0], SonicParameters.Action.AerialHomingAttack);	
		}		
}
Code "Fix Spindash after Finisher" by "datsquishyfello"
//
	#include "Reflection" noemit

    #lib "Sonic"
	#lib "Reflection"
//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
	return;
	
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishF.ignoreTime, 0);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishB.ignoreTime, 0);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishL.ignoreTime, 0);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishR.ignoreTime, 0);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.acceleComboFinish.ignoreTime, 0);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.acceleComboFinishF.ignoreTime, 0);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.acceleComboFinishB.ignoreTime, 0);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.acceleComboFinishL.ignoreTime, 0);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.acceleComboFinishR.ignoreTime, 0);
}
Code "Spin Dash While Sliding During Combat" by "datsquishyfello"
//
	#include "Reflection" noemit
	#import "GOComponents"
	
    #lib "Sonic"
	#lib "Reflection"
	#lib "SonicParameters"
    #lib "Bitwise"
	#lib "BlackboardBattle"
	#lib "BlackboardStatus"
    #lib "GameObject"
    #lib "GameManager"
    #lib "Player"
	
//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
	return;
	
	var pData = Player.GetPlayerData();
    if (pData == null)
        return;

    var pGOCPlayerEyesight = GameObject.GetGOC<GOCPlayerEyesight>(&pData->GameObject);
    var pHomingEyesight    = pGOCPlayerEyesight->GetEyesightComponent<HomingEyesight>();

    if (pHomingEyesight == null)
        return;

    var pTarget = pHomingEyesight->GetPriorityTarget() /* Returns TargetData */;
    if (pTarget == null)
        return;

	var pGameObject = Player.Status.GetLockOnTarget();

    if (pGameObject == null)
        return;
	
    bool isLockOnEnemy = GameObject.GetGOC(pGameObject, "GOCHealth") != null;
	
	if (Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateComboWarp && !BlackboardStatus.IsSuper())
	{
		if (IS_COMBAT_FLAG(IsSpinDash))
		{
		Player.State.Redirect<Sonic.StateID>(Sonic.StateID.StateSonicBoomKick, Sonic.StateID.StateSpinBoostCharge);
		}
		else
		{
		Player.State.Discard<Sonic.StateID>(Sonic.StateID.StateSonicBoomKick);
		}
	}
	else
	{
		Player.State.Restore<Sonic.StateID>(Sonic.StateID.StateSonicBoomKick)
	}
	
		if (isLockOnEnemy && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSliding || isLockOnEnemy && pTarget->Distance >= 5.5f)
		{	
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitExistTarget[5], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitInAir[5], SonicParameters.Action.Root);					
		}	
		else if (isLockOnEnemy && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSliding || isLockOnEnemy && pTarget->Distance <= 5.5f)
		{
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitExistTarget[5], SonicParameters.Action.ComboFinish);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitInAir[5], SonicParameters.Action.ComboFinish);	
		}
		else
		{
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitExistTarget[5], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitInAir[5], SonicParameters.Action.Root);		
		}
}
Code "Max Level Changes" by "datsquishyfello"
//
	#include "Reflection" noemit
	
	#lib "SonicParameters"
	#lib "Reflection"
	#lib "GameMode"
	#lib "Sonic"
	#lib "BlackboardStatus"

//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
		return;
		
	if (BlackboardStatus.IsSuper())
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 15);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 10);			
	}
	else if (GameMode.GetName() == "GameModeBattleRush")
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 12);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 12);			
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 25);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 10);	
	}
}
Code "Super Sonic Changes" by "datsquishyfello"
//
	#include "Reflection" noemit
	
	#lib "SonicParameters"
	#lib "Reflection"
	#lib "Sonic"
	#lib "BlackboardStatus"
	
    static float delayTimer = 0.33f;
    static float startTimer = 0.0f;	

//
{
    var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	var pBlackboardItem = BlackboardItem.Get();
	
	if (SonicParametersInfo.pData == null || pBlackboardItem == null)
		return;
		
	int maxRings = pBlackboardItem->RingCapacity;
	int rings = pBlackboardItem->RingCount;
	
	if (BlackboardStatus.IsSuper())
	{
//		RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.parry.maxRecieveTime, 0.44f);
		RFL_SET_PARAM(SonicParametersInfo, common.cyloop.recoveryQuickCyloopEnergyByTime, 0.8f);	
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.afterAirBoost.transitInAir[5], SonicParameters.Action.SonicBoom);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.afterAirBoost.transitExistTarget[5], SonicParameters.Action.SonicBoom);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.stomping.transitExistTarget[5], SonicParameters.Action.SpinSlash);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.chargeAttack.transitExistTarget[5], SonicParameters.Action.Stomping);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.chargeAttack.transitInAir[5], SonicParameters.Action.Stomping);
		RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.sliding.minSpeed, 60.0f);
		RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.sliding.gravitySize, 0.0f);
	}
	else
	{
//		RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.parry.maxRecieveTime, 0.469f);
		RFL_SET_PARAM(SonicParametersInfo, common.cyloop.recoveryQuickCyloopEnergyByTime, 1.2f);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.afterAirBoost.transitInAir[5], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.afterAirBoost.transitExistTarget[5], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.stomping.transitExistTarget[5], SonicParameters.Action.ComboFinish);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.chargeAttack.transitExistTarget[5], SonicParameters.Action.ComboFinish);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.chargeAttack.transitInAir[5], SonicParameters.Action.ComboFinish);		
		RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.sliding.minSpeed, 25.0f);
		RFL_SET_PARAM(SonicParametersInfo, forwardView.modePackage.sliding.gravitySize, 60.0f);		
	}
}
Code "Super Sonic: Slide" by "datsquishyfello"
//
	#include "Reflection" noemit
	
	#lib "SonicParameters"
	#lib "Reflection"
	#lib "Sonic"
	#lib "Time"
	#lib "BlackboardBattle"
	#lib "BlackboardStatus"
    #lib "Player"
	
	static float attackDelay = 0.3f;
    static float timer = 0.0f;
	static float delayTimer = 0.15f;
	static float startTimer = 0.0f;  
	static bool isCemt = false;

//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
	return;

	if (BlackboardStatus.IsSuper())
	{
		if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingFinished)
		{
			timer += Time.GetDeltaTime();
			
			if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateHomingFinished && Player.Input.IsPressed(Player.InputActionType.PlayerStomping) && timer >= attackDelay)
			{
				Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateSliding);
			}
		}
		else
		{
			timer = 0.0f;
		}
		
		if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && Player.Input.IsPressed(Player.InputActionType.PlayerStomping))
		{
			Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateSliding);
		}
		if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSliding)
		{
			isCemt = true;
			Player.Animation.SetAnimation("COMBO_PURSUIT_LOOP");
			startTimer += Time.GetDeltaTime();

            if (startTimer >= delayTimer && isCemt)
            {
				Player.Effect.PlayEffect("slide", "ec_ss_skill_psycho_aura01_linepar01");
                startTimer = 0.0f;
            }    
		}
		else
		{
			isCemt = false;
			Player.Effect.StopEffect("slide");
			startTimer = 0.0f
		}
	}
}
Code "Super Sonic: Homing Shot on RT + Y" by "datsquishyfello"
//
	#include "Reflection" noemit
	#import "GOComponents"
	
	#lib "SonicParameters"
	#lib "Reflection"
	#lib "Sonic"
	#lib "Time"
	#lib "BlackboardBattle"
	#lib "BlackboardStatus"
    #lib "GameObject"
    #lib "GameManager"
    #lib "Player"
	
	static float hsAttackDelay = 0.25f;
    static float hsTimer = 0.0f;	
//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
	return;
	
	var pBlackboardBattle = BlackboardBattle.Get();

    if (pBlackboardBattle == null)
        return;
		
	var pData = Player.GetPlayerData();
    if (pData == null)
        return;

    var pGOCPlayerEyesight = GameObject.GetGOC<GOCPlayerEyesight>(&pData->GameObject);
    var pHomingEyesight    = pGOCPlayerEyesight->GetEyesightComponent<HomingEyesight>();

    if (pHomingEyesight == null)
        return;

    var pTarget = pHomingEyesight->GetPriorityTarget() /* Returns TargetData */;
    if (pTarget == null)
        return;

	var pGameObject = Player.Status.GetLockOnTarget();

    if (pGameObject == null)
        return;
	
    bool isLockOnEnemy = GameObject.GetGOC(pGameObject, "GOCHealth") != null;
	
	if (BlackboardStatus.IsSuper())
	{
		if (IS_COMBAT_FLAG(IsHomingShot))
		{
			if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && Player.Input.IsDown(Player.InputActionType.PlayerBoost) || Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFlyLocal && Player.Input.IsDown(Player.InputActionType.PlayerBoost))
			{
				hsTimer += Time.GetDeltaTime();
			
				if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && Player.Input.IsDown(Player.InputActionType.PlayerBoost) && Player.Input.IsPressed(Player.InputActionType.PlayerCyloop) && hsTimer <= hsAttackDelay && isLockOnEnemy && pBlackboardBattle->QuickCyloopAmount == 60.0f
				||
				Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFly && Player.Input.IsDown(Player.InputActionType.PlayerBoost) && Player.Input.IsPressed(Player.InputActionType.PlayerCyloop) && hsTimer <= hsAttackDelay && isLockOnEnemy && pBlackboardBattle->QuickCyloopAmount == 120.0f
				||
				Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFlyLocal && Player.Input.IsDown(Player.InputActionType.PlayerBoost) && Player.Input.IsPressed(Player.InputActionType.PlayerCyloop) && hsTimer <= hsAttackDelay && isLockOnEnemy && pBlackboardBattle->QuickCyloopAmount == 60.0f
				||
				Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateFlyLocal && Player.Input.IsDown(Player.InputActionType.PlayerBoost) && Player.Input.IsPressed(Player.InputActionType.PlayerCyloop) && hsTimer <= hsAttackDelay && isLockOnEnemy && pBlackboardBattle->QuickCyloopAmount == 120.0f)
				{
					Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateHomingShot);
					pBlackboardBattle->QuickCyloopAmount -= 60.0f
				}
			}
			else
			{
				hsTimer = 0.0f;
			}
		}
	}
}
Code "Spin Dash Vs Drop Dash Damage Tweak" by "datsquishyfello"
//
	#include "Reflection" noemit
	
	#lib "SonicParameters"
	#lib "Reflection"	
	#lib "Sonic"
	#lib "BlackboardStatus"

//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
		return;
		
	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoost || Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoostCharge)
	{	
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.damageRate, 0.76f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 3.0f);		
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.damageRate, 0.96f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 5.000001f);		
	}
}
Code "Stomp Skill Vs Manual Stomp Damage Tweak" by "datsquishyfello"
//
	#include "Reflection" noemit
	
	#lib "SonicParameters"
	#lib "Reflection"	
	#lib "Sonic"
	#lib "BlackboardStatus"
	
//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
		return;
		
	if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateStomping)
	{	
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.stomping.damageRate, 0.7f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.stomping.addComboValueAccele, 13.75f);
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.stomping.damageRate, 0.6f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.stomping.addComboValueAccele, 7.75f);
	}
}
Code "Cyloop Item Drop Nerf in Battle" by "datsquishyfello"
//
	#include "Reflection" noemit

    #lib "Sonic"
	#lib "SonicParameters"
	#lib "AmyParameters"
	#lib "KnucklesParameters"
	#lib "TailsParameters"
    #lib "Bitwise"
	#lib "BlackboardBattle"
    #lib "BlackboardStatus"

//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	var AmyParametersInfo = Reflection.GetDataInfo<AmyParameters.Root>("amy_common");
	var KnucklesParametersInfo = Reflection.GetDataInfo<KnucklesParameters.Root>("knuckles_common");
	var TailsParametersInfo = Reflection.GetDataInfo<TailsParameters.Root>("tails_common");
	
	if (SonicParametersInfo.pData == null && AmyParametersInfo.pData == null && KnucklesParametersInfo.pData == null && TailsParametersInfo.pData == null)
		return;
	
	var pBlackboardBattle = BlackboardBattle.Get();
	if (pBlackboardBattle == null)
		return;
		
		if (IS_WORLD_FLAG(IsBattle))
		{
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.numRings, 3);
			RFL_SET_PARAM(AmyParametersInfo, common.cyloop.dropItem.numRings, 3);
			RFL_SET_PARAM(KnucklesParametersInfo, common.cyloop.dropItem.numRings, 3);
			RFL_SET_PARAM(TailsParametersInfo, common.cyloop.dropItem.numRings, 3);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.numRings2, 5);
			RFL_SET_PARAM(AmyParametersInfo, common.cyloop.dropItem.numRings2, 5);
			RFL_SET_PARAM(KnucklesParametersInfo, common.cyloop.dropItem.numRings2, 5);
			RFL_SET_PARAM(TailsParametersInfo, common.cyloop.dropItem.numRings2, 5);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.num10Rings, 1);
			RFL_SET_PARAM(AmyParametersInfo, common.cyloop.dropItem.num10Rings, 1);
			RFL_SET_PARAM(KnucklesParametersInfo, common.cyloop.dropItem.num10Rings, 1);
			RFL_SET_PARAM(TailsParametersInfo, common.cyloop.dropItem.num10Rings, 1);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.numSkillPieces, 0);
			RFL_SET_PARAM(AmyParametersInfo, common.cyloop.dropItem.numSkillPieces, 0);
			RFL_SET_PARAM(KnucklesParametersInfo, common.cyloop.dropItem.numSkillPieces, 0);
			RFL_SET_PARAM(TailsParametersInfo, common.cyloop.dropItem.numSkillPieces, 0);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.rareDropCoolTime, 7.0f);	
			RFL_SET_PARAM(AmyParametersInfo, common.cyloop.dropItem.rareDropCoolTime, 7.0f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.cyloop.dropItem.rareDropCoolTime, 7.0f);
			RFL_SET_PARAM(TailsParametersInfo, common.cyloop.dropItem.rareDropCoolTime, 7.0f);				
		}	
		else
		{
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.numRings, 15);
			RFL_SET_PARAM(AmyParametersInfo, common.cyloop.dropItem.numRings, 15);
			RFL_SET_PARAM(KnucklesParametersInfo, common.cyloop.dropItem.numRings, 15);
			RFL_SET_PARAM(TailsParametersInfo, common.cyloop.dropItem.numRings, 15);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.numRings2, 3);
			RFL_SET_PARAM(AmyParametersInfo, common.cyloop.dropItem.numRings2, 3);
			RFL_SET_PARAM(KnucklesParametersInfo, common.cyloop.dropItem.numRings2, 3);
			RFL_SET_PARAM(TailsParametersInfo, common.cyloop.dropItem.numRings2, 3);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.num10Rings, 5);
			RFL_SET_PARAM(AmyParametersInfo, common.cyloop.dropItem.num10Rings, 5);
			RFL_SET_PARAM(KnucklesParametersInfo, common.cyloop.dropItem.num10Rings, 5);
			RFL_SET_PARAM(TailsParametersInfo, common.cyloop.dropItem.num10Rings, 5);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.numSkillPieces, 10);
			RFL_SET_PARAM(AmyParametersInfo, common.cyloop.dropItem.numSkillPieces, 10);
			RFL_SET_PARAM(KnucklesParametersInfo, common.cyloop.dropItem.numSkillPieces, 10);
			RFL_SET_PARAM(TailsParametersInfo, common.cyloop.dropItem.numSkillPieces, 10);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.rareDropCoolTime, 0.0f);
			RFL_SET_PARAM(AmyParametersInfo, common.cyloop.dropItem.rareDropCoolTime, 0.0f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.cyloop.dropItem.rareDropCoolTime, 0.0f);
			RFL_SET_PARAM(TailsParametersInfo, common.cyloop.dropItem.rareDropCoolTime, 0.0f);	
		}
}
Code "Recovery Smash Damage Nerf" by "datsquishyfello"
//
	#include "Reflection" noemit
	
	#lib "SonicParameters"
	#lib "Sonic"
	#lib "Reflection"
	#lib "BlackboardStatus"

//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
		return;
		
	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSmash && Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateDamageBlowOff || Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateDamageBlowOffHeavy)
	{	
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smash.damageRate, 0.20f);	
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smashLast.damageRate, 1.6f);			
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smash.damageRate, 0.25f);	
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smashLast.damageRate, 2.1f);		
	}
}
Code "Wild Rush Spam Prevention" by "datsquishyfello"
//
	#include "Reflection" noemit
	
	#lib "SonicParameters"
	#lib "Sonic"
	#lib "BlackboardStatus"
	#lib "Reflection"
	#lib "Time"
	
	static float timer = 0.0f;
	static float delayTimerSuper = 5.0f;	
	static float delayTimer = 6.0f;
	static bool isDecay = false;

//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
		return;
		
	if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateCrasher)
	{	
		isDecay = true;
		timer = 0.0f;
	}
	if (isDecay)
	{
		timer += Time.GetDeltaTime();
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.avoid.transitExistTarget[5], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.avoid.transitInAir[5], SonicParameters.Action.Root);		
		
		if (BlackboardStatus.IsSuper())
		{
			if (timer >= delayTimerSuper)
			{
				isDecay = false;
				Player.Sound.PlaySound("sn_skateboard_change");
			}
		}
		else
		{
			if (timer >= delayTimer)
			{
				isDecay = false;
				Player.Sound.PlaySound("sn_skateboard_change");
			}
		}
	}
	
	if (!isDecay)
	{
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.avoid.transitExistTarget[5], SonicParameters.Action.Crasher);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.avoid.transitInAir[5], SonicParameters.Action.Crasher);	
		timer = 0.0f;
	}
}
Code "Finisher Spam Prevention" by "datsquishyfello"
//
	#include "Reflection" noemit
	
	#lib "SonicParameters"
	#lib "Sonic"
	#lib "Reflection"
	#lib "Time"
	
	static float timer = 0.0f;
	static float delayTimer = 1.0f;
	static bool isDecay = false;

//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
		return;
		
	if (Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateHomingFinish)
	{	
		isDecay = true;
		timer = 0.0f;
	}
	if (isDecay)
	{
		timer += Time.GetDeltaTime();
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishB.damageRate, 0.6f);		
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishL.damageRate, 1.05f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishR.damageRate, 1.05f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishB.attributes, 0);
		
		if (timer >= delayTimer)
		{
			isDecay = false;
		}
	}
	
	if (!isDecay)
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishB.damageRate, 1.05f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishL.damageRate, 1.2f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishR.damageRate, 1.2f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.comboFinishB.attributes, 32);
		timer = 0.0f;
	}
}
Code "Less Crappy Bounce Jump" by "datsquishyfello"
//
	#include "Reflection" noemit
	
	#lib "Sonic"
	#lib "Reflection"

//
{
	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBounceJump && Player.Status.IsLockOnCursorVisible() && Player.Input.IsPressed(Player.InputActionType.PlayerAttack))
	{	
		Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateHomingAttack);
	}
	
	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBounceJump && Player.Input.IsPressed(Player.InputActionType.PlayerLeftStep) || Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateBounceJump && Player.Input.IsPressed(Player.InputActionType.PlayerRightStep)
	||
	Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinAttack && Player.Input.IsPressed(Player.InputActionType.PlayerLeftStep) || Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinAttack && Player.Input.IsPressed(Player.InputActionType.PlayerRightStep))
	{	
		Player.State.SetState<Sonic.StateID>(Sonic.StateID.StateFall);
	}
}
Code "Perfect Dodge Speed Buff" by "datsquishyfello"
//
    #include "Reflection" noemit

    #lib "Reflection"
    #lib "GameHitStopParameter"
//
{
	if (Player.GetPlayerType() != Player.PlayerType.Sonic)
        return;

    var GameHitStopParameterInfo = Reflection.GetDataInfo<GameHitStopParameter.Root>("hitstop");

    if (GameHitStopParameterInfo.pData == null)
        return;
    
    {    
        RFL_SET_PARAM(GameHitStopParameterInfo, data[8].scale, 1.33f);
        RFL_SET_PARAM(GameHitStopParameterInfo, data[8].time, 1.5f);
        RFL_SET_PARAM(GameHitStopParameterInfo, data[8].layerPlayer, true);
        RFL_SET_PARAM(GameHitStopParameterInfo, data[8].layerEnemy, false);
        RFL_SET_PARAM(GameHitStopParameterInfo, data[8].layerDamagedEnemy, false);
    }
}
Code "Dynamic Drop Dash Damage" by "DatSquishyFello" does "Increases rolling damage based on Sonic's current speed."
//
	#include "Reflection" noemit

    #lib "Sonic"
	#lib "Reflection"
	
	#load "System.Numerics.dll"

    using System;
    using System.Numerics;
//

{
    var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
	return;
	
    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;	

	float speed = Player.Kinematics.GetHorizontalMagnitude();

	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateDropDash)
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.damageRate, speed/36.0f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, speed)/2.5f;
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.addComboValue, speed/2.5f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.addComboValueAccele, speed/2.0f);
		
		if (speed >= 50)
		{
			RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.attributes, 164);
			
		}
		else
		{
			RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.attributes, 32);
		}
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.damageRate, 0.725f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, 16.0f);	
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.addComboValue, 6.0f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.addComboValueAccele, 16f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.attributes, 32);
	}
}
Code "Grinding Upkeeps Phantom Rush" by "DatSquishyFello"
//
	#include "Reflection" noemit

    #lib "Sonic"
	#lib "Reflection"
//

{
    var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
	return;
	
    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;	

	float speed = Player.Kinematics.GetHorizontalMagnitude();

	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateGrind)
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.acceleMode.declineSpeedAccele, speed/-4.75f);
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.acceleMode.declineSpeedAccele, 20.5f);
	}
}
Code "Amy Stuff" by "datsquishyfello"
//
	#include "Reflection" noemit
	
    #lib "Player"
	#lib "Reflection"
	#lib "Amy"
	#lib "AmyParameters"
    #lib "Bitwise"
	#lib "BlackboardBattle"
    #lib "BlackboardStatus"
	#lib "Time"
	
	static float delayTimer = 0.75f;
    static float timer = 0.0f;

//
{
	var AmyParametersInfo = Reflection.GetDataInfo<AmyParameters.Root>("amy_common");
	if (AmyParametersInfo.pData == null)
		return;
		
    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;
		
	var pBlackboardBattle = BlackboardBattle.Get();

    if (pBlackboardBattle == null)
        return;

	Player.State.Redirect<Amy.StateID>(Amy.StateID.StateCyHammer, Amy.StateID.StateAirCyHammer)

	if (Player.GetPlayerType() == Player.PlayerType.Amy)
	{
		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateRun && Player.Input.IsPressed(Player.InputActionType.PlayerStomping))
		{
			Player.State.SetState<Amy.StateID>(Amy.StateID.StateHighJump);
		}
			if (Player.State.GetPreviousStateID<Amy.StateID>() != Amy.StateID.AmyStateStompingDown && Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateHighJump)
			{
				RFL_SET_PARAM(AmyParametersInfo, forwardView.highJump.jumpForce, 16.0f);
			}
			else
			{
				RFL_SET_PARAM(AmyParametersInfo, forwardView.highJump.jumpForce, 23.0f);	
			}
//		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.AmyStateStompingDown && Player.Input.IsPressed(Player.InputActionType.PlayerCyloop))
//		{
//			Player.State.SetState<Amy.StateID>(Amy.StateID.StateAirCyHammer);
//		}
		//Higher Crit Rate on Charm Attack
		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.AmyStateCharmAttack || Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.AmyStateCharmAttackFollow)
		{
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.common.criticalRate, 0.33f);
		}
		else
		{
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.common.criticalRate, 0.05f);
		}
		//Cyhammer Hitbox
		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateAirCyHammer)
		{
			Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 3.5f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.damageRate, 1.2f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 0.0f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, 0.0f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.velocityKeepTime, -1.0f);
		}
		else
		{
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.damageRate, 0.8f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 5.000001f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, 20.0f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.velocityKeepTime, 0.66f);
		}
		
		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateAirCyHammer && Player.Input.IsPressed(Player.InputActionType.PlayerLeftStep) && !Player.Status.IsGrounded() || Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateAirCyHammer && Player.Input.IsPressed(Player.InputActionType.PlayerRightStep) && !Player.Status.IsGrounded())
		{
			Player.State.SetState<Amy.StateID>(Amy.StateID.StateFall);
		}
		
		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateAirCyHammer && Player.State.GetPreviousStateID<Amy.StateID>() != Amy.StateID.StateAirBoost && Player.Input.IsPressed(Player.InputActionType.PlayerBoost) && !Player.Status.IsGrounded())
		{
			Player.State.SetState<Amy.StateID>(Amy.StateID.StateAirBoost);
		}
		
		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateAirCyHammer && Player.Input.IsPressed(Player.InputActionType.PlayerStomping) && !Player.Status.IsGrounded())
		{
			Player.State.SetState<Amy.StateID>(Amy.StateID.AmyStateStompingDown);
		}
		//Cyhammer Cyloop Buff on Grounded
		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateCyHammer)
		{
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.cyloopQuick.damageRate, 1.0f);
		}
		else
		{
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.cyloopQuick.damageRate, 0.5f);
		}
		//Faster CyHammer Cancel
		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateCyHammer)
		{
			timer += Time.GetDeltaTime();
		
			if (Player.Input.IsPressed(Player.InputActionType.PlayerAttack) && Player.Status.IsLockOnCursorVisible() && timer >= delayTimer)
			{
				Player.State.SetState<Amy.StateID>(Amy.StateID.StateHomingAttack);
			}
		}
		else if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateAirCyHammer)
		{
			if (Player.Input.IsPressed(Player.InputActionType.PlayerAttack) && Player.Status.IsLockOnCursorVisible())
				{
					Player.State.SetState<Amy.StateID>(Amy.StateID.StateHomingAttack);
				}
		}
		else
		{
			timer = 0.0f;
		}
		
//		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.AmyStateTarotRollingFall)
//		{
//			kinematics->Position.Y += 0.1f;
//		}
	}
}
Code "Knux Stuff" by "datsquishyfello"
//
	#include "Reflection" noemit	

    #lib "Reflection"
	#lib BlackboardItem
	#lib "Player"
	#lib "Time"
    #lib "KnucklesParameters"
	
	static float delayTimer = 0.3f;
    static float attackDelay = 0.0f;
//
{
    var KnucklesParametersInfo = Reflection.GetDataInfo<KnucklesParameters.Root>("knuckles_common");

	if (KnucklesParametersInfo.pData == null)
		return;
		
	var pBlackboardItem = BlackboardItem.Get();

    if (pBlackboardItem == null)
        return;
	
	int rings = pBlackboardItem->RingCount;
			
			
	if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateRun || Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.KnucklesStateDrillBoost)
	{
		RFL_SET_PARAM(KnucklesParametersInfo, common.combo.comboTable.root.transitExistTarget[4], KnucklesParameters.Action.KnucklesUppercut);
		RFL_SET_PARAM(KnucklesParametersInfo, common.combo.comboTable.root.transitInAir[4], KnucklesParameters.Action.KnucklesUppercut);	
		RFL_SET_PARAM(KnucklesParametersInfo, common.combo.comboTable.root.transitNotExistTarget[4], KnucklesParameters.Action.KnucklesUppercut);			
	}	
	else
	{
		RFL_SET_PARAM(KnucklesParametersInfo, common.combo.comboTable.root.transitExistTarget[4], KnucklesParameters.Action.Root);
		RFL_SET_PARAM(KnucklesParametersInfo, common.combo.comboTable.root.transitInAir[4], KnucklesParameters.Action.Root);	
		RFL_SET_PARAM(KnucklesParametersInfo, common.combo.comboTable.root.transitNotExistTarget[4], KnucklesParameters.Action.Root);
	}
	
	if (Player.GetPlayerType() == Player.PlayerType.Knuckles)
	{
		//Stronger at 0 Rings
		if (rings == 0)
		{
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 12);	
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 28);
		}
		else
		{
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 10);		
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 25);
		}
		
		//Faster Drill Charge on Ground
		if (Player.Status.IsGrounded())
		{
			RFL_SET_PARAM(KnucklesParametersInfo, forwardView.maximumHeatKnuckle.lockonLevelUpSpanTime[0], 0.13f);
			RFL_SET_PARAM(KnucklesParametersInfo, forwardView.maximumHeatKnuckle.lockonLevelUpSpanTime[1], 0.12f);
			RFL_SET_PARAM(KnucklesParametersInfo, forwardView.maximumHeatKnuckle.lockonLevelUpSpanTime[2], 0.11f);
			RFL_SET_PARAM(KnucklesParametersInfo, forwardView.maximumHeatKnuckle.lockonLevelUpSpanTime[3], 0.2f);
		}
		else
		{
			RFL_SET_PARAM(KnucklesParametersInfo, forwardView.maximumHeatKnuckle.lockonLevelUpSpanTime[0], 0.15f);
			RFL_SET_PARAM(KnucklesParametersInfo, forwardView.maximumHeatKnuckle.lockonLevelUpSpanTime[1], 0.17f);
			RFL_SET_PARAM(KnucklesParametersInfo, forwardView.maximumHeatKnuckle.lockonLevelUpSpanTime[2], 0.17f);
			RFL_SET_PARAM(KnucklesParametersInfo, forwardView.maximumHeatKnuckle.lockonLevelUpSpanTime[3], 0.3f);
		}
		
		//CyKnuckle Spike
		if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateCyKnucklePreFall)
		{
			Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 2.5f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, -29.5f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, 0.0f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.velocityKeepTime, 0.01f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.damageRate, 1.0f);
		}
		else
		{
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 5.000001f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, 20.0f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.velocityKeepTime, 0.66f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.damageRate, 0.8f);
		}
		
		if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateCyKnucklePreFall && Player.Input.IsPressed(Player.InputActionType.PlayerJump))
		{
			Player.State.SetState<Knuckles.StateID>(Knuckles.StateID.StateGliding);
		}	
		if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateCyKnucklePreFall && Player.Input.IsPressed(Player.InputActionType.PlayerLeftStep) && !Player.Status.IsGrounded() || Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateCyKnucklePreFall && Player.Input.IsPressed(Player.InputActionType.PlayerRightStep) && !Player.Status.IsGrounded())
		{
			Player.State.SetState<Knuckles.StateID>(Knuckles.StateID.StateFall);
		}
		
		if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateCyKnucklePreFall && Player.State.GetPreviousStateID<Knuckles.StateID>() != Knuckles.StateID.StateAirBoost && Player.Input.IsPressed(Player.InputActionType.PlayerBoost) && !Player.Status.IsGrounded())
		{
			Player.State.SetState<Knuckles.StateID>(Knuckles.StateID.StateAirBoost);
		}
		
		if (Player.State.GetPreviousStateID<Knuckles.StateID>() != Knuckles.StateID.StateCyKnucklePreFall)
		{
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.cyloopQuick.damageRate, 1.0f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.cyloopAerial.damageRate, 1.0f);

		}
		else
		{
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.cyloopQuick.damageRate, 0.5f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.cyloopAerial.damageRate, 0.5f);
		}	
		
		//Blitz Knuckle
		if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.KnucklesStateStompingBounce)
		{
			attackDelay += Time.GetDeltaTime();
		
			if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.KnucklesStateStompingBounce && Player.Input.IsPressed(Player.InputActionType.PlayerStomping) && attackDelay >= delayTimer && Player.Status.IsLockOnCursorVisible())
			{
				Player.State.SetState<Knuckles.StateID>(Knuckles.StateID.StateMaximumHeatKnuckle);
			}
		}
		else
		{
			attackDelay = 0.0f;
		}
	
		//Glide Stuff
		if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateGliding)
		{
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinAttack.velocityKeepTime, -1.0f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinAttack.damageRate, 0.5f);
		}
		else
		{
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinAttack.velocityKeepTime, 0.0f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinAttack.damageRate, 0.1f);
		}
		
//		if (Player.State.GetPreviousStateID<Knuckles.StateID>() == Knuckles.StateID.KnucklesStateUppercut && Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.KnucklesStateUppercut))
//		{
//			Player.State.SetState<Knuckles.StateID>(Knuckles.StateID.StateGliding);			
//		}
	}		
}
Code "Tails Stuff" by "datsquishyfello"
//
	#include "Reflection" noemit

    #lib "Player"
	#lib "Reflection"
	#lib "Tails"
	#lib "TailsParameters"
    #lib "Bitwise"
	#lib "BlackboardBattle"

//
{
	var TailsParametersInfo = Reflection.GetDataInfo<TailsParameters.Root>("tails_common");
	if (TailsParametersInfo.pData == null)
		return;

	if (Player.GetPlayerType() == Player.PlayerType.Tails)
	{
		if (Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateRun && Player.Input.IsPressed(Player.InputActionType.PlayerStomping))
		{
			Player.State.SetState<Tails.StateID>(Tails.StateID.TailsStateStompingDown);
//			Player.State.SetState<Tails.StateID>(Tails.StateID.StateSliding);
		}
		
		if (Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateSpinBoostCharge)
		{
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.damageRate, 1.0f);
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 12.000001f);
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, 8.0f);
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.velocityKeepTime, 0.88f);
		}
		else
		{
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 5.000001f);
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, 20.0f);
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.velocityKeepTime, 0.66f);
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.damageRate, 0.8f);			
		}
		
		//Homing Thwack
		if (Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateSpinBoost && Player.Status.IsLockOnCursorVisible() && Player.Input.IsPressed(Player.InputActionType.PlayerAttack))
		{
			Player.State.SetState<Tails.StateID>(Tails.StateID.StateHomingAttack);		
		}
				
		if (Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateAvoid && Player.Input.IsPressed(Player.InputActionType.PlayerAttack) || Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateHomingFinished && Player.Input.IsPressed(Player.InputActionType.PlayerAttack))
		{
			Player.State.SetState<Tails.StateID>(Tails.StateID.StateFall);	
		}
		
		if (Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateBounceJump && Player.Status.IsLockOnCursorVisible() && Player.State.GetPreviousStateID<Tails.StateID>() == Tails.StateID.StateHomingAttack)
		{
			Player.State.SetState<Tails.StateID>(Tails.StateID.StateHomingAttack);		
		}
		
		//Sliding Stuff
//		if (Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateSliding)
//		{
//			Player.Animation.SetAnimation("JUMP_BALL");
//		}
//		if (Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateSliding && Player.Input.IsPressed(Player.InputActionType.PlayerAttack))
//		{
//			Player.State.SetState<Tails.StateID>(Tails.StateID.StateRun);		
//		}
	}
}
Library "GameHitStopParameter"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x28)]
    public struct GameHitStopParameterData
    {
        [FieldOffset(0x00)] public UnmanagedString name;
        [FieldOffset(0x10)] public float scale;
        [FieldOffset(0x14)] public float time;
        [FieldOffset(0x18)] public float easeOutTime;
        [FieldOffset(0x1C)] public float delayTime;
        [FieldOffset(0x20)] public bool layerPlayer;
        [FieldOffset(0x21)] public bool layerEnemy;
        [FieldOffset(0x22)] public bool layerDamagedEnemy;
        [FieldOffset(0x23)] public bool layerCamera;
        [FieldOffset(0x24)] public bool layerOthers;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xA00)]
    public struct Root
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* GameHitStopParameterData[64] */ _data[2560];

        public unsafe GameHitStopParameterData* data
        {
            get
            {
                fixed (byte* p_data = _data)
                    return (GameHitStopParameterData*)p_data;
            }
        }
    }
}