Code "Combo Table Fixes" by "datsquishyfello"
//
	#include "Reflection" noemit

    #lib "Sonic"
	#lib "Reflection"
	#lib "SonicParameters"
    #lib "Bitwise"
	#lib "BlackboardBattle"
    #lib "BlackboardStatus"

//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
	return;
	
	var pBlackboardBattle = BlackboardBattle.Get();

    if (pBlackboardBattle == null)
        return;
		
		if (IS_WORLD_FLAG(IsBattle))
		{
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitExistTarget[0], SonicParameters.Action.AcceleCombo1);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitInAir[0], SonicParameters.Action.AerialAcceleCombo1);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitExistTarget[5], SonicParameters.Action.ComboFinish);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitInAir[5], SonicParameters.Action.ComboFinish);					
		}	
		else
		{
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitExistTarget[0], SonicParameters.Action.HomingAttack);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitInAir[0], SonicParameters.Action.AerialHomingAttack);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitExistTarget[5], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitInAir[5], SonicParameters.Action.Root);			
		}
}
Code "Spin Dash While Sliding During Combat" by "datsquishyfello"
//
	#include "Reflection" noemit

    #lib "Sonic"
	#lib "Reflection"
	#lib "SonicParameters"
    #lib "Bitwise"
	#lib "BlackboardBattle"
	
//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
	return;
	
	var pBlackboardBattle = BlackboardBattle.Get();

    if (pBlackboardBattle == null)
        return;
		
		if (IS_WORLD_FLAG(IsBattle) && Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSliding)
		{	
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitExistTarget[5], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitInAir[5], SonicParameters.Action.Root);					
		}	
		else if (IS_WORLD_FLAG(IsBattle) && Player.State.GetCurrentStateID<Sonic.StateID>() != Sonic.StateID.StateSliding)
		{
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitExistTarget[5], SonicParameters.Action.ComboFinish);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitInAir[5], SonicParameters.Action.ComboFinish);	
		}
		else
		{
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitExistTarget[5], SonicParameters.Action.Root);
			RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.root.transitInAir[5], SonicParameters.Action.Root);		
		}
}
Code "Super Sonic Changes" by "datsquishyfello"
//
	#include "Reflection" noemit
	
	#lib "SonicParameters"
	#lib "Reflection"
	#lib "Sonic"
	#lib "BlackboardStatus"

//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
		return;
		
	if (BlackboardStatus.IsSuper())
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 15);
		RFL_SET_PARAM(SonicParametersInfo, common.cyloop.recoveryQuickCyloopEnergyByTime, 0.8f);	
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.afterAirBoost.transitInAir[5], SonicParameters.Action.SonicBoom);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.afterAirBoost.transitExistTarget[5], SonicParameters.Action.SonicBoom);		
		
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 25);
		RFL_SET_PARAM(SonicParametersInfo, common.cyloop.recoveryQuickCyloopEnergyByTime, 1.2f);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.afterAirBoost.transitInAir[5], SonicParameters.Action.Root);
		RFL_SET_PARAM(SonicParametersInfo, common.combo.comboTable.afterAirBoost.transitExistTarget[5], SonicParameters.Action.Root);				
	}
	
}
Code "Spin Dash Vs Drop Dash Damage Tweak" by "datsquishyfello"
//
	#include "Reflection" noemit
	
	#lib "SonicParameters"
	#lib "Reflection"	
	#lib "Sonic"
	#lib "BlackboardStatus"

//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
		return;
		
	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoost || Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSpinBoostCharge)
	{	
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.damageRate, 0.76f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 3.0f);		
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.damageRate, 0.96f);
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 7.000001f);		
	}
	
}
Code "Cyloop Item Drop Nerf in Battle" by "datsquishyfello"
//
	#include "Reflection" noemit

    #lib "Sonic"
	#lib "SonicParameters"
	#lib "AmyParameters"
	#lib "KnucklesParameters"
	#lib "TailsParameters"
    #lib "Bitwise"
	#lib "BlackboardBattle"
    #lib "BlackboardStatus"

//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
	return;
	
	var pBlackboardBattle = BlackboardBattle.Get();

    if (pBlackboardBattle == null)
        return;
		
		if (IS_WORLD_FLAG(IsBattle))
		{
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.numRings, 3);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.numRings2, 5);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.num10Rings, 1);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.numSkillPieces, 0);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.skillPieceExp, 0);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.rareDropCoolTime, 7.0f);					
		}	
		else
		{
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.numRings, 15);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.numRings2, 3);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.num10Rings, 5);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.numSkillPieces, 10);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.skillPieceExp, 20);
			RFL_SET_PARAM(SonicParametersInfo, common.cyloop.dropItem.rareDropCoolTime, 0.0f);	
		}
}
Code "Recovery Smash Damage Nerf" by "datsquishyfello"
//
	#include "Reflection" noemit
	
	#lib "SonicParameters"
	#lib "Sonic"
	#lib "Reflection"
	#lib "BlackboardStatus"

//
{
	var SonicParametersInfo = Reflection.GetDataInfo<SonicParameters.Root>("player_common");
	
	if (SonicParametersInfo.pData == null)
		return;
		
	if (Player.State.GetCurrentStateID<Sonic.StateID>() == Sonic.StateID.StateSmash && Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateDamageBlowOff || Player.State.GetPreviousStateID<Sonic.StateID>() == Sonic.StateID.StateDamageBlowOffHeavy)
	{	
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smash.damageRate, 0.20f);	
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smashLast.damageRate, 1.6f);			
	}
	else
	{
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smash.damageRate, 0.25f);	
		RFL_SET_PARAM(SonicParametersInfo, common.commonPackage.attack.smashLast.damageRate, 2.1f);		
	}
	
}
Code "Amy Stuff" by "datsquishyfello"
//
	#include "Reflection" noemit
	
    #lib "Player"
	#lib "Reflection"
	#lib "Amy"
	#lib "AmyParameters"
    #lib "Bitwise"
	#lib "BlackboardBattle"
    #lib "BlackboardStatus"

//
{		
	var AmyParametersInfo = Reflection.GetDataInfo<AmyParameters.Root>("amy_common");
	if (AmyParametersInfo.pData == null)
		return;
		
    var kinematics = Player.Kinematics.Get();

    if (kinematics == null)
        return;

	Player.State.Redirect<Amy.StateID>(Amy.StateID.StateCyHammer, Amy.StateID.StateAirCyHammer)

	if (Player.GetPlayerType() == Player.PlayerType.Amy)
	{
		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateRun && Player.Input.IsPressed(Player.InputActionType.PlayerStomping))
		{
			Player.State.SetState<Amy.StateID>(Amy.StateID.StateHighJump);
		}
			if (Player.State.GetPreviousStateID<Amy.StateID>() != Amy.StateID.AmyStateStompingDown && Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateHighJump)
			{
				RFL_SET_PARAM(AmyParametersInfo, forwardView.highJump.jumpForce, 16.0f);
				RFL_SET_PARAM(AmyParametersInfo, forwardView.modePackage.speed.normal2.max, 25.0f);
			}
			else
			{
				RFL_SET_PARAM(AmyParametersInfo, forwardView.highJump.jumpForce, 23.0f);	
				RFL_SET_PARAM(AmyParametersInfo, forwardView.modePackage.speed.normal2.max, 15.0f);				
			}
		//Higher Crit Rate on Charm Attack
		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.AmyStateCharmAttack || Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.AmyStateCharmAttackFollow)
		{
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.common.criticalRate, 0.33f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.common.criticalDamageRate, 2.0f);					
		}
		else
		{
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.common.criticalRate, 0.05f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.common.criticalDamageRate, 2.2f);
		}
		//Cyhammer Hitbox
		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateAirCyHammer)
		{
			Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 3.5f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.damageRate, 0.9f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 0.0f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, 0.0f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.velocityKeepTime, -1.0f);
		}
		else
		{
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.damageRate, 0.8f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 5.000001f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, 20.0f);
			RFL_SET_PARAM(AmyParametersInfo, common.commonPackage.attack.spinDash.velocityKeepTime, 0.66f);
		}
		
		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateAirCyHammer && Player.Input.IsPressed(Player.InputActionType.PlayerLeftStep) && !Player.Status.IsGrounded() || Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.StateAirCyHammer && Player.Input.IsPressed(Player.InputActionType.PlayerRightStep) && !Player.Status.IsGrounded())
		{
			Player.State.SetState<Amy.StateID>(Amy.StateID.StateFall);
		}
//		if (Player.State.GetCurrentStateID<Amy.StateID>() == Amy.StateID.AmyStateTarotRollingFall)
//		{
//			kinematics->Position.Y += 0.1f;
//		}
	}
}
Code "Knux Stuff" by "datsquishyfello"
//
	#include "Reflection" noemit	

    #lib "Reflection"
	#lib "Player"
	#lib "Time"
    #lib "KnucklesParameters"
//
{
    var KnucklesParametersInfo = Reflection.GetDataInfo<KnucklesParameters.Root>("knuckles_common");

	if (KnucklesParametersInfo.pData == null)
		return;
		
	var pBlackboardItem = BlackboardItem.Get();

    if (pBlackboardItem == null)
        return;
	
	int rings = pBlackboardItem->RingCount;
			
			
	if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateRun)
	{
		RFL_SET_PARAM(KnucklesParametersInfo, common.combo.comboTable.root.transitExistTarget[4], KnucklesParameters.Action.KnucklesUppercut);
		RFL_SET_PARAM(KnucklesParametersInfo, common.combo.comboTable.root.transitInAir[4], KnucklesParameters.Action.KnucklesUppercut);	
		RFL_SET_PARAM(KnucklesParametersInfo, common.combo.comboTable.root.transitNotExistTarget[4], KnucklesParameters.Action.KnucklesUppercut);			
	}	
	else
	{
		RFL_SET_PARAM(KnucklesParametersInfo, common.combo.comboTable.root.transitExistTarget[4], KnucklesParameters.Action.Root);
		RFL_SET_PARAM(KnucklesParametersInfo, common.combo.comboTable.root.transitInAir[4], KnucklesParameters.Action.Root);	
		RFL_SET_PARAM(KnucklesParametersInfo, common.combo.comboTable.root.transitNotExistTarget[4], KnucklesParameters.Action.Root);
	}
	
	if (Player.GetPlayerType() == Player.PlayerType.Knuckles)
	{
		//Stronger at 0 Rings
		if (rings == 0)
		{
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 12);	
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 28);
		}
		else
		{
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.common.offensive.pointMin, 10);		
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.common.offensive.pointMax, 25);
		}
		
		//CyKnuckle Spike
		if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateCyKnucklePreFall)
		{
			Player.Collision.SetCollisionSphere(Player.CollisionType.Damage, 2.5f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, -24.0f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, 0.0f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.velocityKeepTime, 0.01f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.damageRate, 1.0f);
		}
		else
		{
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 5.000001f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, 20.0f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.velocityKeepTime, 0.66f);
			RFL_SET_PARAM(KnucklesParametersInfo, common.commonPackage.attack.spinDash.damageRate, 0.8f);
		}
		
		if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateCyKnucklePreFall && Player.Input.IsPressed(Player.InputActionType.PlayerJump))
		{
			Player.State.SetState<Knuckles.StateID>(Knuckles.StateID.StateGliding);
		}	
		if (Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateCyKnucklePreFall && Player.Input.IsPressed(Player.InputActionType.PlayerLeftStep) && !Player.Status.IsGrounded() || Player.State.GetCurrentStateID<Knuckles.StateID>() == Knuckles.StateID.StateCyKnucklePreFall && Player.Input.IsPressed(Player.InputActionType.PlayerRightStep) && !Player.Status.IsGrounded())
		{
			Player.State.SetState<Knuckles.StateID>(Knuckles.StateID.StateFall);
		}		
	}		
}
Code "Tails Stuff" by "datsquishyfello"
//
	#include "Reflection" noemit

    #lib "Player"
	#lib "Reflection"
	#lib "Tails"
	#lib "TailsParameters"
    #lib "Bitwise"
	#lib "BlackboardBattle"

//
{
	var TailsParametersInfo = Reflection.GetDataInfo<TailsParameters.Root>("tails_common");
	if (TailsParametersInfo.pData == null)
		return;

	if (Player.GetPlayerType() == Player.PlayerType.Tails)
	{
		if (Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateRun && Player.Input.IsPressed(Player.InputActionType.PlayerStomping))
		{
			Player.State.SetState<Tails.StateID>(Tails.StateID.TailsStateStompingDown);
		}
		
		if (Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateSpinBoostCharge)
		{
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.damageRate, 1.0f);
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 12.000001f);
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, 8.0f);
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.velocityKeepTime, 0.88f);
		}
		else
		{
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.velocity.Y, 5.000001f);
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.velocity.Z, 20.0f);
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.velocityKeepTime, 0.66f);
			RFL_SET_PARAM(TailsParametersInfo, common.commonPackage.attack.spinDash.damageRate, 0.8f);			
		}
		
		//Homing Thwack
		if (Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateSpinBoost && Player.Status.IsLockOnCursorVisible() && Player.Input.IsPressed(Player.InputActionType.PlayerAttack))
		{
			Player.State.SetState<Tails.StateID>(Tails.StateID.StateHomingAttack);		
		}
				
		if (Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateAvoid && Player.Input.IsPressed(Player.InputActionType.PlayerAttack) || Player.State.GetCurrentStateID<Tails.StateID>() == Tails.StateID.StateHomingFinished && Player.Input.IsPressed(Player.InputActionType.PlayerAttack))
		{
			Player.State.SetState<Tails.StateID>(Tails.StateID.StateFall);	
		}
	}
}
Code "Fixed Platforming Soldiers" by "DatSquishyFello"
//
	#include "Reflection" noemit

	#lib "Reflection"
	#lib "EnemyJellymanConfig"

    #import "Services"
	
//

{
	var EnemyJellymanConfigInfo = Reflection.GetDataInfo<EnemyJellymanConfig.Root>("enm_jellyman");

	if (EnemyJellymanConfigInfo.pData == null)
		return;
	
	if (LevelInfo.GetCurrentStageID() == "w1r03")
	{
		RFL_SET_PARAM(EnemyJellymanConfigInfo, levelParams[0].common.maxHealthPoint, 72);	
	}
	else
	{
		RFL_SET_PARAM(EnemyJellymanConfigInfo, levelParams[0].common.maxHealthPoint, 2);				
	}
}





Library "EnemyJellymanConfig"
{
    #load "System.Numerics.dll"

    using System.Numerics;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct Movement
    {
        [FieldOffset(0x00)] public float rotateSpeedMin;
        [FieldOffset(0x04)] public float rotateSpeedMax;
        [FieldOffset(0x08)] public float rotateSpeedMaxSpeedMin;
        [FieldOffset(0x0C)] public float rotateSpeedMinSpeedMax;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct Eyesight
    {
        [FieldOffset(0x00)] public float distance;
        [FieldOffset(0x04)] public float angle;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x0C)]
    public struct Fight
    {
        [FieldOffset(0x00)] public float attackRange;
        [FieldOffset(0x04)] public float attackAngle;
        [FieldOffset(0x08)] public float attackSpeed;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x28)]
    public struct EnemyJellymanModeConfig
    {
        [FieldOffset(0x00)] public Movement movement;
        [FieldOffset(0x10)] public Eyesight eyesight;
        [FieldOffset(0x18)] public Fight fight;
        [FieldOffset(0x24)] public float transformRate;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3C)]
    public struct JellymanHumanCommonConfig
    {
        [FieldOffset(0x00)] public EnemyJellymanModeConfig common;
        [FieldOffset(0x28)] public unsafe fixed float actionDistance[5];
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1C)]
    public struct RingParameter
    {
        [FieldOffset(0x00)] public float suckedTime;
        [FieldOffset(0x04)] public float launchAngle;
        [FieldOffset(0x08)] public float launchMaxSpeed;
        [FieldOffset(0x0C)] public float launchMinSpeed;
        [FieldOffset(0x10)] public float randomRangeMin;
        [FieldOffset(0x14)] public float randomRangeMax;
        [FieldOffset(0x18)] public float lifeTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public struct UnmanagedString
    {
        [FieldOffset(0)] public long pValue;

        public string Value
        {
            get
            {
                if (pValue == 0)
                    return string.Empty;

                return Marshal.PtrToStringAnsi((nint)pValue);
            }

            set => pValue = (long)Marshal.StringToHGlobalAnsi(value);
        }

        public UnmanagedString(string in_value)
        {
            Value = in_value;
        }

        public static implicit operator UnmanagedString(string in_value)
        {
            return new UnmanagedString(in_value);
        }

        public static bool operator ==(UnmanagedString in_left, string in_right)
        {
            return in_left.Value == in_right;
        }

        public static bool operator !=(UnmanagedString in_left, string in_right)
        {
            return !(in_left == in_right);
        }

        public override bool Equals(object in_obj)
        {
            if (in_obj is string str)
                return Value == str;

            return base.Equals(in_obj);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public override string ToString()
        {
            return Value;
        }
    }

    public enum VolumeShape : sbyte
    {
        SPHERE = 0,
        BOX = 1,
        CYLINDER = 2,
        CAPSULE = 3,
        NUM = 4
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x30)]
    public struct VolumeInfo
    {
        [FieldOffset(0x00)] public Vector3 volumeSize;
        [FieldOffset(0x10)] public Vector3 volumeOffset;
        [FieldOffset(0x20)] public Vector3 volumeRotation;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xB0)]
    public struct MappingPairInfo
    {
        [FieldOffset(0x00)] public UnmanagedString tagName;
        [FieldOffset(0x10)] public sbyte pieceNum;
        [FieldOffset(0x14)] public float pieceFuncFactor;
        [FieldOffset(0x18)] public VolumeShape volumeShape;
        [FieldOffset(0x20)] public UnmanagedString humanNodeName;
        [FieldOffset(0x30)] public VolumeInfo humanVolume;
        [FieldOffset(0x60)] public UnmanagedString eggNodeName;
        [FieldOffset(0x70)] public VolumeInfo eggVolume;
        [FieldOffset(0xA0)] public bool effectActive;
        [FieldOffset(0xA1)] public bool debugDraw;
        [FieldOffset(0xA2)] public bool debugDrawVolumeAxis;
        [FieldOffset(0xA3)] public bool debugDrawAxis;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1670)]
    public struct EnemyCommonConfig
    {
        [FieldOffset(0x00)] public JellymanHumanCommonConfig human;
        [FieldOffset(0x3C)] public RingParameter ringParam;
        [FieldOffset(0x58)] public int codeDropNumMin;
        [FieldOffset(0x5C)] public int codeDropNumMax;
        [FieldOffset(0x60)] public int codeXDropNumMin;
        [FieldOffset(0x64)] public int codeXDropNumMax;
        [FieldOffset(0x70)] public unsafe fixed byte /* MappingPairInfo[32] */ _mappingPairInfo[5632];

        public unsafe MappingPairInfo* mappingPairInfo
        {
            get
            {
                fixed (byte* p_mappingPairInfo = _mappingPairInfo)
                    return (MappingPairInfo*)p_mappingPairInfo;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x3C)]
    public struct JellymanCommonLevelConfig
    {
        [FieldOffset(0x00)] public int maxHealthPoint;
        [FieldOffset(0x04)] public unsafe fixed float maxStunPoint[3];
        [FieldOffset(0x10)] public float stunDecreaseStartTime;
        [FieldOffset(0x14)] public float stunDecreaseSpeed;
        [FieldOffset(0x18)] public unsafe fixed float maxStaggerPoint[3];
        [FieldOffset(0x24)] public float staggerDecreaseStartTime;
        [FieldOffset(0x28)] public float staggerDecreaseSpeed;
        [FieldOffset(0x2C)] public float stunTime;
        [FieldOffset(0x30)] public float attackRate;
        [FieldOffset(0x34)] public float attackMotionSpeed;
        [FieldOffset(0x38)] public ushort expItemNum;
        [FieldOffset(0x3A)] public ushort exp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x10)]
    public struct JellymanHumanLevelConfig
    {
        [FieldOffset(0x00)] public float wallTime;
        [FieldOffset(0x04)] public int wallLife;
        [FieldOffset(0x08)] public float guardTime;
        [FieldOffset(0x0C)] public float guardCoolTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x50)]
    public struct EnemyLevelConfig
    {
        [FieldOffset(0x00)] public int level;
        [FieldOffset(0x04)] public JellymanCommonLevelConfig common;
        [FieldOffset(0x40)] public JellymanHumanLevelConfig human;
    }

    public enum SuperArmorType : sbyte
    {
        None = 0,
        Attack = 1,
        Always = 2
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x08)]
    public struct JellymanCommonActionConfig
    {
        [FieldOffset(0x00)] public SuperArmorType superArmor;
        [FieldOffset(0x01)] public bool isTransform;
        [FieldOffset(0x04)] public float downTime;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x14)]
    public struct JellymanHumanActionRate
    {
        [FieldOffset(0x00)] public unsafe fixed float actionRate[5];
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xA0)]
    public struct JellymanHumanActionConfig
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* JellymanHumanActionRate[4] */ _rateTable[80];

        public unsafe JellymanHumanActionRate* rateTable
        {
            get
            {
                fixed (byte* p_rateTable = _rateTable)
                    return (JellymanHumanActionRate*)p_rateTable;
            }
        }

        [FieldOffset(0x50)] public unsafe fixed float coolTime[5];
        [FieldOffset(0x64)] public float attackCoolTime;
        [FieldOffset(0x68)] public float nearRange;
        [FieldOffset(0x6C)] public int nearRateId;
        [FieldOffset(0x70)] public int farRateId;
        [FieldOffset(0x74)] public bool isCounterGuard;
        [FieldOffset(0x75)] public bool isCounterWall;
        [FieldOffset(0x76)] public bool isSpikeWall;
        [FieldOffset(0x78)] public int waveNum;
        [FieldOffset(0x7C)] public float waveUpTime;
        [FieldOffset(0x80)] public float waveLifeTime;
        [FieldOffset(0x84)] public float waveDownTime;
        [FieldOffset(0x88)] public float waveRadius;
        [FieldOffset(0x8C)] public float waveAddRadius;
        [FieldOffset(0x90)] public float waveSpawnTime;
        [FieldOffset(0x94)] public float waveKeepRadius;
        [FieldOffset(0x98)] public float waveHeight;
        [FieldOffset(0x9C)] public int rushNum;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xAC)]
    public struct EnemyLevelBandConfig
    {
        [FieldOffset(0x00)] public int level;
        [FieldOffset(0x04)] public JellymanCommonActionConfig common;
        [FieldOffset(0x0C)] public JellymanHumanActionConfig human;
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x20)]
    public struct EnemySquadAvarageLevelConfig
    {
        [FieldOffset(0x00)] public int level;
        [FieldOffset(0x04)] public int maxActionCount;
        [FieldOffset(0x08)] public float spAttackWaitTime;
        [FieldOffset(0x0C)] public unsafe fixed int humanMaxActionCount[5];
    }

    [StructLayout(LayoutKind.Explicit, Size = 0xA0)]
    public struct EnemySquadConfig
    {
        [FieldOffset(0x00)] public unsafe fixed byte /* EnemySquadAvarageLevelConfig[5] */ _averageLevelConfig[160];

        public unsafe EnemySquadAvarageLevelConfig* averageLevelConfig
        {
            get
            {
                fixed (byte* p_averageLevelConfig = _averageLevelConfig)
                    return (EnemySquadAvarageLevelConfig*)p_averageLevelConfig;
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 0x1CF0)]
    public struct Root
    {
        [FieldOffset(0x00)] public EnemyCommonConfig commonParams;
        [FieldOffset(0x1670)] public unsafe fixed byte /* EnemyLevelConfig[8] */ _levelParams[640];

        public unsafe EnemyLevelConfig* levelParams
        {
            get
            {
                fixed (byte* p_levelParams = _levelParams)
                    return (EnemyLevelConfig*)p_levelParams;
            }
        }

        [FieldOffset(0x18F0)] public unsafe fixed byte /* EnemyLevelBandConfig[5] */ _levelBands[860];

        public unsafe EnemyLevelBandConfig* levelBands
        {
            get
            {
                fixed (byte* p_levelBands = _levelBands)
                    return (EnemyLevelBandConfig*)p_levelBands;
            }
        }

        [FieldOffset(0x1C4C)] public EnemySquadConfig squadParams;
    }

}